name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: deployment
    steps:
      - name: Display public key
        run: ssh-keygen -y -f ~/.ssh/id_rsa

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          sed -i 's/\\n/\n/g' ~/.ssh/id_rsa

      - name: Check SSH key
        run: ssh-keygen -l -f ~/.ssh/id_rsa || echo "Invalid key format"

      - name: Test SSH Connection
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} "echo Connected successfully"

      - uses: actions/checkout@v2
      - name: Debug
        run: |
          echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "DOCKERHUB_TOKEN set: ${{ secrets.DOCKERHUB_TOKEN != '' }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Build and push Phoenix image
        uses: docker/build-push-action@v2
        with:
          context: ./api/time_manager
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/timemanager-phoenix:latest

      - name: Build and push Nuxt image
        uses: docker/build-push-action@v2
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/timemanager-nuxt:latest

      - name: Check SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Invalid key format"
        shell: bash


      - name: Deploy to DigitalOcean
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} << EOF
              echo "Connected successfully"
              pwd
              ls -la
              cd /var/www/timemanager/TimeManager || echo "Failed to change directory"
              ls -la
              docker-compose pull || echo "Failed to pull Docker images"
              docker-compose up -d || echo "Failed to start Docker containers"
            EOF
        shell: bash
